给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3

思路：维护一个容器，将str字符往里加，原字符在容器能找到，就将容器的字符T出去，最左边的位置加一

代码：
class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		// 关联容器
		unordered_set<char> lookup;
		int maxStr = 0;
		int left = 0;
		for (int i = 0; i < s.size(); i++) {
			// 执行while，!= lookup.end()意味着找到重复的了，
               这里一定要用while，不能用if：while的条件是在变的，比如"pwwk",当是第三个w的时候，用if只能把第一个p剔出，用while可以将w前面的p和w都剔除！
			while (lookup.find(s[i]) != lookup.end()) {
				lookup.erase(s[left]);
				left++;
			}
			maxStr = max(maxStr, i - left + 1);
			lookup.insert(s[i]);
		}
		cout << maxStr << endl;
		return maxStr;
	}
};

