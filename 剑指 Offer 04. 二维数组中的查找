在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

 

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]
给定 target = 5，返回 true。

给定 target = 20，返回 false。

 

限制：

0 <= n <= 1000

0 <= m <= 1000


解题思路：根据二维数组的排序特点进行查找，从右上角的元素开始，右上角的元素特点：这一行里最大的，这一列里最小的，如果指定元素
         跟右上角元素比较的话，如果比它大，这一行元素就不用比较了，如果比它小，这一列元素就不用比较了


代码：
class Solution {
public:
    bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) {
        bool isFind = false;

        if(!matrix.empty()){
            int l = matrix.size();
            int m = matrix[0].size();
            int row = 0;
            int column = m-1;
            while(column>=0 && row < l){
                int temp = matrix[row][column];
                if(temp == target){
                    isFind = true;
                    break;
                }else if(temp > target){
                    --column;
                }else{
                    ++row;
                }
            }
        }
        return isFind;
    }
};
