61. 旋转链表
给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

问题分析：这是一个链表里很经典的问题，分析示例的时候，是按照连成环的方式数最终输出的，
         链表节点向右移动的过程中要找到相应的位置断开这个环，找到新的链表头和链表尾
         
class Solution {
public:
	ListNode* rotateRight(ListNode* head, int k) {
		if (head == NULL ){
            return head;
        }
		ListNode *dummy = head;
		int size = 1;
		while (dummy->next) {
			size++;
			dummy = dummy->next;
		}
        // 获取链表长度不能这样写,因为while没有判断dummy->next，执行到dummy->next的时候会越界
        /*
        int size = 0;
		while (dummy) {
			size++;
			dummy = dummy->next;
		}
        */

		if (k % size == 0)return head;
		//首尾相连，形成环形链表
		dummy->next = head;
		int m = size - k % size;
		//dummy
		while (m--) {
			dummy = dummy->next;
		}
		//dummy
		ListNode *res = dummy->next;
		dummy->next = nullptr;
		return res;
	}
};
